price_matrix <- price_matrix[time_string] #slice price_matrix to desired time frame
#Create return matrices for list of assets
#daily
daily_return_matrix <- lapply(price_matrix, dailyReturn)
daily_return_matrix <- do.call(merge, daily_return_matrix)
colnames(daily_return_matrix) <- asset_list
daily_return_matrix <- daily_return_matrix[-1]
#monthly
monthly_return_matrix <- lapply(price_matrix, monthlyReturn)
monthly_return_matrix <- do.call(merge, monthly_return_matrix)
colnames(monthly_return_matrix) <- asset_list
monthly_return_matrix <- monthly_return_matrix[-1]
#yearly
yearly_return_matrix <- lapply(price_matrix, yearlyReturn)
yearly_return_matrix <- do.call(merge, yearly_return_matrix)
colnames(yearly_return_matrix) <- asset_list
yearly_return_matrix <- yearly_return_matrix[-1]
#Create Covariance Matrix for list of assets
covariance_matrix <- cov(daily_return_matrix )
#return all matrices
return(list("price_matrix" = price_matrix,
"daily_return_matrix" = daily_return_matrix,
"monthly_return_matrix" = monthly_return_matrix,
"yearly_return_matrix" = yearly_return_matrix,
"covariance_matrix" =   covariance_matrix))
}
get_assets_b <- function(w_vector, big_list)
{
select_list = list()
for (a in 1:length(w_vector))
{
if (w_vector[a]==1) { select_list <- append(select_list,big_list[a]) }
}
return (select_list)
}
bit_portfolio_eval <- function(w_vector, big_list, time_string, in_GA)
{
mini_vector <- c(1,1,1,1,1,1,1,1,1,1) #equal weighting for this stage
mini_vector <- mini_vector /sum(mini_vector) #normalize portfolio weights
penalty <- (2 * (sum(w_vector)-10)^2)
#Zero penalty if there are exactly 10 assets active in the portfolio
#if there are more or less than 10 assets, do not waste time calculating matrices!
if (sum(w_vector) != 10) {return (-penalty)}
#Build data matrices
asset_list <- get_assets_b(w_vector, big_list)
this_matrices <- build_matrices(asset_list,time_string)
price_m <- this_matrices$price_matrix
d_ret_m <- this_matrices$daily_return_matrix
y_ret_m <- this_matrices$yearly_return_matrix
cov_m <- cov(d_ret_m)
#Evaluate Portfolio Performance
n_days = 252
#Risk
d_P_risk <- t(mini_vector) %*% cov_m %*% mini_vector #daily
y_P_risk <- ((1 + d_P_risk)^n_days)-1 #annualize
y_P_risk <- sqrt(y_P_risk) #annualized standard deviation
#Return
y_P_return <- sum(mini_vector * y_ret_m)
#Return to Risk Ratio
return_to_risk <- y_P_return / y_P_risk
#Performance adjusted by penalty if incorrect number of assets in the portfolio
adj_fitness <- return_to_risk - penalty
#If in_GA == TRUE returns adjusted fitness only,
#if FALSE return Performance details
if (in_GA) {return(adj_fitness)}
else {
return(list("time" = time_string,
"return" = y_P_return,
"risk" = y_P_risk,
"fitness" = adj_fitness))
}
}
create_bit_GA <- function(big_list, time_string, max_i, pop_size, in_GA=TRUE) {
P_GA <- ga(type="binary",
nBits = 50,
maxiter = max_i,
fitness = function(w_vector)
bit_portfolio_eval(w_vector, big_list, time_string, in_GA),
popSize = pop_size,
suggestions = create_rnd_port(pop_size,50,10)
)
plot(P_GA)
return(P_GA)
}
create_rnd_port <- function(n_samples, vector_size, n_active)
{
#creates n_samples of vectors size vector_size with approx n_active assets
this_matrix <- matrix(ncol=vector_size, nrow=0, byrow=TRUE)
prob <- n_active / vector_size
for (s in 1:n_samples)
{
this_row <- c()
for (i in 1:vector_size)
{
this_rn <- runif(1)
if (this_rn <= prob) {a = 1}
else {a = 0}
this_row <- c(this_row, a)
}
this_matrix <- rbind(this_matrix,this_row)
}
return (this_matrix)
}
official_GA <- create_bit_GA(fiftyAssets,"2018-12-31/2020-01-01",150,300,TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.show=TRUE, error=FALSE, cache =TRUE)
#Function to Build price, return and covariance matrices for a list of assets
#and a time interval
build_matrices <- function(asset_list, time_string)
{
#time string format: "yyyy-mm-dd/yyyy-mm-dd" includes first day, do not include last day
#Create  price matrix for list of assets
price_matrix <- lapply(asset_list, function(x) {Ad(get(x))}) #fill it with adjusted close data
price_matrix <- do.call(merge, price_matrix) #convert to xts object
names(price_matrix) <- c(asset_list) #change names
price_matrix <- price_matrix[time_string] #slice price_matrix to desired time frame
#Create return matrices for list of assets
#daily
daily_return_matrix <- lapply(price_matrix, dailyReturn)
daily_return_matrix <- do.call(merge, daily_return_matrix)
colnames(daily_return_matrix) <- asset_list
daily_return_matrix <- daily_return_matrix[-1]
#monthly
monthly_return_matrix <- lapply(price_matrix, monthlyReturn)
monthly_return_matrix <- do.call(merge, monthly_return_matrix)
colnames(monthly_return_matrix) <- asset_list
monthly_return_matrix <- monthly_return_matrix[-1]
#yearly
yearly_return_matrix <- lapply(price_matrix, yearlyReturn)
yearly_return_matrix <- do.call(merge, yearly_return_matrix)
colnames(yearly_return_matrix) <- asset_list
yearly_return_matrix <- yearly_return_matrix[-1]
#Create Covariance Matrix for list of assets
covariance_matrix <- cov(daily_return_matrix )
#return all matrices
return(list("price_matrix" = price_matrix,
"daily_return_matrix" = daily_return_matrix,
"monthly_return_matrix" = monthly_return_matrix,
"yearly_return_matrix" = yearly_return_matrix,
"covariance_matrix" =   covariance_matrix))
}
official_GA <- create_bit_GA(fiftyAssets,"2018-12-31/2020-01-01",150,300,TRUE)
eq_wts <- c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1)
rnd_wts <- runif(10)
rnd_wts <- rnd_wts/sum(rnd_wts)
rnd_wts
sum(rnd_wts)
eq_wts <- c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1)
rnd_wts <- runif(10)
rnd_wts <- rnd_wts/sum(rnd_wts)
data_mat <- create_data(stock)
eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
data_mat <- create_data(myStocks)
eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
eq_data
library(quantmod)
myStocks <- c("TSLA", "IBM", "INTC","NVDA","GOOGL","COP","XOM","HPQ","SONY","ORCL")
stock_pool <- sort(c("AAPL","MSFT","GOOG","GOOGL","AMZN","TSLA","NVDA","META","ASML","AVGO","PEP",
"COST","AZN","XOM","TMUS","ADBE","NFLX","CMCSA","TXN","QCOM","AMD","HON","AMGN",
"SBUX","PDD","INTU","INTC","GILD","AMAT","ADP","BKNG","ADI","PYPL","MDLZ","HPQ",
"REGN","IBM","VRTX","FISV","LRCX","MU","CSX","SONY","CHTR","ORCL","COP",
"KLAC","SNPS","MAR","MNST"))
getSymbols(stock_pool, from="2019-01-01",to="2020-02-01")
genarate_population <- function (pop_size) {
for(i in 1:pop_size){
wts <- runif(n=length(myStocks))
wts <- wts/sum(wts)
if(i == 1){
pop_mat <- rbind(wts)
}
else{
pop_mat <- rbind(pop_mat,wts)
}
}
return(pop_mat)
}
constraint = function(x) {
boundary_constr = (sum(x)-1)**2   # "sum x = 1" constraint
for (i in 1:length(x)) {
boundary_constr = boundary_constr + max(c(0,x[i]-1))**2 + max(c(0,-x[i]))**2
}
return (boundary_constr)
}
create_data <- function(stocks){
prices <- lapply(stocks,function(x) {Ad(get(x))})
names(prices) <- c(stocks)
# Daily returns
daily_ret <- lapply(prices,dailyReturn)
daily_ret <- do.call(merge,daily_ret)
colnames(daily_ret) <- stocks
# Annualized returns
annual_ret <- lapply(prices,yearlyReturn)
annual_ret <- do.call(merge,annual_ret)
colnames(annual_ret) <- stocks
# Covariance matrix
cov_mat <- cov(daily_ret)
return(list("prices" = prices,
"daily_ret" = daily_ret,
"annual_ret" = annual_ret,
"cov_mat" =   cov_mat))
}
obj_opt_func <- function(wts,data,fast){
days = 252
#Risk
daily_risk <- t(wts) %*% data$cov_mat %*% wts
yearly_risk <- ((1 + daily_risk)^days)-1
yearly_risk <- sqrt(yearly_risk)
#Return
yearly_return <- sum(data$annual_ret * wts)
#Sharpe ratio
sharpe <- yearly_return/yearly_risk
if (fast) {
return(sharpe-100*constraint(wts))
}
else {
return(list("return" = yearly_return,
"risk" = yearly_risk,
"fitness" = sharpe-100*constraint(wts)))
}
}
library("GA")
optimal_returns = function(stock){
data_mat <- create_data(stock)
ga_res <- ga(
type="real-valued",
fitness = function(x){obj_opt_func(x,data_mat,fast=TRUE)},
lower = rep(0,length(myStocks)),
upper = rep(1,length(myStocks)),
maxiter = 7000,
run=300,
monitor=TRUE,
seed=1,
popSize = 300
)
return(ga_res)
}
sol = optimal_returns(myStocks)
print(summary(sol))
sum(summary(sol)$solution)
evolved <- summary(sol)$solution
evolved
eq_wts <- c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1)
rnd_wts <- runif(10)
rnd_wts <- rnd_wts/sum(rnd_wts)
data_mat <- create_data(myStocks)
eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
evolved_data <- obj_opt_func(evolved,data_mat,fast=FALSE)
eq_data
rnd_data
constraint = function(x) {
boundary_constr = (sum(x)-1)**2   # "sum x = 1" constraint
for (i in 1:length(x)) {
boundary_constr = boundary_constr + max(c(0,x[i]-1))**2 + max(c(0,-x[i]))**2
}
return (boundary_constr)
}
create_data <- function(stocks){
prices <- lapply(stocks,function(x) {Ad(get(x))})
names(prices) <- c(stocks)
# Daily returns
daily_ret <- lapply(prices,dailyReturn)
daily_ret <- do.call(merge,daily_ret)
colnames(daily_ret) <- stocks
# Annualized returns
annual_ret <- lapply(prices,yearlyReturn)
annual_ret <- do.call(merge,annual_ret)
colnames(annual_ret) <- stocks
# Covariance matrix
cov_mat <- cov(daily_ret)
return(list("prices" = prices,
"daily_ret" = daily_ret,
"annual_ret" = annual_ret,
"cov_mat" =   cov_mat))
}
obj_opt_func <- function(wts,data,fast){
days = 252
cov_mat <- data$cov_mat
#Risk
daily_risk <- t(wts) %*% cov_mat %*% wts
yearly_risk <- ((1 + daily_risk)^days)-1
yearly_risk <- sqrt(yearly_risk)
#Return
yearly_return <- sum(data$annual_ret * wts)
#Sharpe ratio
sharpe <- yearly_return/yearly_risk
if (fast) {
return(sharpe-100*constraint(wts))
}
else {
return(list("return" = yearly_return,
"risk" = yearly_risk,
"fitness" = sharpe-100*constraint(wts)))
}
}
library("GA")
optimal_returns = function(stock){
data_mat <- create_data(stock)
ga_res <- ga(
type="real-valued",
fitness = function(x){obj_opt_func(x,data_mat,fast=TRUE)},
lower = rep(0,length(myStocks)),
upper = rep(1,length(myStocks)),
maxiter = 7000,
run=300,
monitor=TRUE,
seed=1,
popSize = 300
)
return(ga_res)
}
sol = optimal_returns(myStocks)
print(summary(sol))
sum(summary(sol)$solution)
evolved <- summary(sol)$solution
class(evolved)
evolved <- c(summary(sol)$solution)
class(evolved)
eq_wts <- c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1)
rnd_wts <- runif(10)
rnd_wts <- rnd_wts/sum(rnd_wts)
data_mat <- create_data(myStocks)
eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
evolved_data <- obj_opt_func(evolved,data_mat,fast=FALSE)
rnd_data
eq_data
evolved_data
getSymbols(myStocks, from="2019-01-01",to="2020-01-01")
constraint = function(x) {
boundary_constr = (sum(x)-1)**2   # "sum x = 1" constraint
for (i in 1:length(x)) {
boundary_constr = boundary_constr + max(c(0,x[i]-1))**2 + max(c(0,-x[i]))**2
}
return (boundary_constr)
}
create_data <- function(stocks){
prices <- lapply(stocks,function(x) {Ad(get(x))})
names(prices) <- c(stocks)
# Daily returns
daily_ret <- lapply(prices,dailyReturn)
daily_ret <- do.call(merge,daily_ret)
colnames(daily_ret) <- stocks
# Annualized returns
annual_ret <- lapply(prices,yearlyReturn)
annual_ret <- do.call(merge,annual_ret)
colnames(annual_ret) <- stocks
# Covariance matrix
cov_mat <- cov(daily_ret)
return(list("prices" = prices,
"daily_ret" = daily_ret,
"annual_ret" = annual_ret,
"cov_mat" =   cov_mat))
}
obj_opt_func <- function(wts,data,fast){
days = 252
cov_mat <- data$cov_mat
#Risk
daily_risk <- t(wts) %*% cov_mat %*% wts
yearly_risk <- ((1 + daily_risk)^days)-1
yearly_risk <- sqrt(yearly_risk)
#Return
yearly_return <- sum(data$annual_ret * wts)
#Sharpe ratio
sharpe <- yearly_return/yearly_risk
if (fast) {
return(sharpe-100*constraint(wts))
}
else {
return(list("return" = yearly_return,
"risk" = yearly_risk,
"fitness" = sharpe-100*constraint(wts)))
}
}
library("GA")
optimal_returns = function(stock){
data_mat <- create_data(stock)
ga_res <- ga(
type="real-valued",
fitness = function(x){obj_opt_func(x,data_mat,fast=TRUE)},
lower = rep(0,length(myStocks)),
upper = rep(1,length(myStocks)),
maxiter = 7000,
run=300,
monitor=TRUE,
seed=1,
popSize = 300
)
return(ga_res)
}
sol = optimal_returns(myStocks)
print(summary(sol))
sum(summary(sol)$solution)
evolved <- c(summary(sol)$solution)
class(evolved)
plot(sol)
eq_wts <- c(0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1)
rnd_wts <- runif(10)
rnd_wts <- rnd_wts/sum(rnd_wts)
data_mat <- create_data(myStocks)
eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
evolved_data <- obj_opt_func(evolved,data_mat,fast=FALSE)
rnd_data
eq_data
evolved_data
# Future unseen data
getSymbols(myStocks, from="2020-01-01",to="2021-01-01")
eq_future_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_future_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
evolved_future_data <- obj_opt_func(evolved,data_mat,fast=FALSE)
eq_future_data
data_mat <- create_data(myStocks)
eq_future_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_future_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
evolved_future_data <- obj_opt_func(evolved,data_mat,fast=FALSE)
eq_future_data
rnd_future_data
evolved_future_data
#Max risk portfolio
getSymbols(myStocks, from="2019-01-01",to="2020-01-01")
obj_max_risk_func <- function(wts,data,fast){
days = 252
#Risk
daily_risk <- t(wts) %*% data$cov_mat %*% wts
yearly_risk <- ((1 + daily_risk)^days)-1
yearly_risk <- sqrt(yearly_risk)
#fitness value
fitness <- (yearly_risk-100*constraint(wts))
if (fast) {
return(fitness)
}
else {
return(list("return" = yearly_return,
"risk" = yearly_risk,
"fitness" = fitness))
}
}
max_risk_ga = function(stock){
data_mat <- create_data(stock)
ga_risk_res <- ga(
type="real-valued",
fitness = function(x){obj_max_risk_func(x,data_mat,fast=TRUE)},
lower = rep(0,length(myStocks)),
upper = rep(1,length(myStocks)),
maxiter = 7000,
run=300,
monitor=TRUE,
seed=1,
popSize = 300
)
return(ga_risk_res)
}
risk_sol = max_risk_ga(myStocks)
print(summary(risk_sol))
sum(summary(risk_sol)$solution)
risk_evolved <- c(summary(risk_sol)$solution)
data_mat <- create_data(myStocks)
risk_evolved_perf <- obj_max_risk_func(evolved,data_mat,fast=FALSE)
risk_evolved_perf <- obj_max_risk_func(risk_evolved_perf,data_mat,fast=FALSE)
sum(summary(risk_sol)$solution)
risk_evolved <- c(summary(risk_sol)$solution)
data_mat <- create_data(myStocks)
risk_evolved_perf <- obj_max_risk_func(risk_evolved,data_mat,fast=FALSE)
obj_max_risk_func <- function(wts,data,fast){
days = 252
#Risk
daily_risk <- t(wts) %*% data$cov_mat %*% wts
yearly_risk <- ((1 + daily_risk)^days)-1
yearly_risk <- sqrt(yearly_risk)
#Return
yearly_return <- sum(data$annual_ret * wts)
#fitness value
fitness <- (yearly_risk-100*constraint(wts))
if (fast) {
return(fitness)
}
else {
return(list("return" = yearly_return,
"risk" = yearly_risk,
"fitness" = fitness))
}
}
data_mat <- create_data(myStocks)
risk_evolved_perf <- obj_max_risk_func(risk_evolved,data_mat,fast=FALSE)
risk_evolved_perf
# Future unseen data
getSymbols(myStocks, from="2020-01-01",to="2021-01-01")
data_mat <- create_data(myStocks)
eq_future_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
evolved_future_data <- obj_opt_func(evolved,data_mat,fast=FALSE)
rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
eq_future_data
evolved_future_data
rnd_future_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
rnd_future_data
data_mat <- create_data(myStocks)
###################################################################################################################################
#Comparison of high risk portfolio with random and even weights
###################################################################################################################################
data_mat <- create_data(myStocks)
risk_evolved_perf <- obj_max_risk_func(risk_evolved,data_mat,fast=FALSE)
eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
risk_evolved_perf <- obj_max_risk_func(risk_evolved,data_mat,fast=FALSE)
risk_eq_data <- obj_opt_func(eq_wts,data_mat,fast=FALSE)
risk_rnd_data <- obj_opt_func(rnd_wts,data_mat,fast=FALSE)
risk_evolved_perf
risk_eq_data
risk_rnd_data
install.packages("tinytex")
library(tinytex)
